---
- name: Create Vserver
  na_ontap_svm:
    state: present
    name: "{{ item.name }}"
    root_volume: "{{ item.root_volume }}"
    root_volume_aggregate: "{{ item.root_volume_aggregate }}"
    root_volume_security_style: "{{ item.root_volume_security_style }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ Data_SVMs }}"
- name: Setup iSCSI
  na_ontap_iscsi:
    state: present
    service_state: started
    vserver: "{{ item.name }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ Data_SVMs }}"
  when: item.protocol is search("iscsi") or item.protocol is search("iSCSI")
- name: Create Interface
  na_ontap_interface:
    state: present
    interface_name: "{{ item.interface_name }}"
    home_port: "{{ item.home_port }}"
    home_node: "{{ item.home_node }}"
    role: "{{ item.role }}"
    protocols: "{{ item.protocol }}"
    admin_status: up
    failover_policy: "{{ item.failover_policy }}"
    firewall_policy: mgmt
    is_auto_revert: "{{ item.is_auto_revert }}"
    address: "{{ item.address }}"
    netmask: "{{ item.netmask }}"
    vserver: "{{ item.vserver }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ Network_Interface_SVM_LIF_Setup }}"
- name: Create DNS
  na_ontap_dns:
    state: present
    vserver: "{{ item.vserver }}"
    domains: "{{ item.domains }}"
    nameservers: "{{ item.nameservers }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ Configure_DNS_for_SVM }}"
  when: Configure_DNS_for_SVM != None
- name: Create CIFS Server
  na_ontap_cifs_server:
    state: present
    vserver: "{{ item.vserver }}"
    domain: "{{ item.domain }}"
    cifs_server_name: "{{ item.cifs_server_name }}"
    force: "{{ 'false' if item.force is not defined else item.force }}"
    admin_password: "{{ admin_password }}"
    admin_user_name: "{{ admin_user_name }}"
    ou: "{{ item.ou | default(omit)}}"
    service_state: started
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ CIFS_Server_Create }}"
  when: CIFS_Server_Create != None
- name: Create NFS Server
  na_ontap_nfs:
    state: present
    service_state: started
    vserver: "{{ item.name }}"
    nfsv3: enabled
    nfsv4: disabled
    nfsv41: disabled
    tcp: enabled
    udp: enabled
    vstorage_state: disabled
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ NFS_Server_Create }}"
  when: NFS_Server_Create != None
- name: Setup default rules
  na_ontap_export_policy_rule:
    state: present
    policy_name: default
    vserver: "{{ item.vserver }}"
    client_match: "{{ item.client_match }}"
    ro_rule: "{{ item.ro_rule }}"
    rw_rule: "{{ item.rw_rule }}"
    protocol: "{{ item.protocol }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    ontapi: "{{ ontap_facts.ontap_version }}"
    https: true
    validate_certs: false
  with_items:
    "{{ NFS_Exports }}"
  when: NFS_Exports != None
